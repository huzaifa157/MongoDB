# =====================================================
# ðŸŸ¢ MONGODB NOTES (Detailed and Beginner-Friendly)
# =====================================================

# ðŸ‘‰ What is MongoDB?
# MongoDB is a NoSQL database that stores data in JSON-like documents.
# Each document has key-value pairs, and documents are stored inside collections.

# Example document:
# {
#   "name": "Huzaifa",
#   "age": 21,
#   "course": "Software Engineering"
# }

# =====================================================
# ðŸ”¹ 1. DATABASE COMMANDS
# =====================================================

show dbs
# â†’ Show all existing databases

use myDatabase
# â†’ Switch to (or create) a new database named "myDatabase"

db
# â†’ Show the name of the current database

db.dropDatabase()
# â†’ Delete the current database

# =====================================================
# ðŸ”¹ 2. COLLECTION COMMANDS
# =====================================================

show collections
# â†’ Show all collections inside the current database

db.createCollection("students")
# â†’ Create a new collection named "students"

db.students.drop()
# â†’ Delete (drop) the "students" collection

# =====================================================
# ðŸ”¹ 3. INSERT COMMANDS
# =====================================================

# Insert a single document
db.students.insertOne({
  name: "Huzaifa",
  age: 21,
  course: "Software Engineering"
})

# Insert multiple documents
db.students.insertMany([
  { name: "Ali", age: 22, course: "Computer Science" },
  { name: "Ayesha", age: 20, course: "IT" },
  { name: "Zain", age: 23, course: "Software Engineering" }
])

# =====================================================
# ðŸ”¹ 4. READ COMMANDS (FIND)
# =====================================================

db.students.find()
# â†’ Show all documents in the collection

db.students.find().pretty()
# â†’ Show documents in a readable (pretty) format

db.students.find({ age: 21 })
# â†’ Find all documents where age = 21

db.students.find({ age: { $gt: 20 } })
# â†’ Find all documents where age > 20

db.students.find({ age: { $gte: 21, $lte: 23 } })
# â†’ Find documents where age is between 21 and 23 (inclusive)

db.students.find({ name: { $in: ["Huzaifa", "Ayesha"] } })
# â†’ Find students whose name is either Huzaifa or Ayesha

db.students.find({}, { name: 1, _id: 0 })
# â†’ Show only names (projection)

# =====================================================
# ðŸ”¹ 5. UPDATE COMMANDS
# =====================================================

db.students.updateOne(
  { name: "Huzaifa" },
  { $set: { age: 22, course: "AI Engineering" } }
)
# â†’ Update first matching document

db.students.updateMany(
  { course: "Software Engineering" },
  { $set: { course: "SE" } }
)
# â†’ Update multiple matching documents

# =====================================================
# ðŸ”¹ 6. DELETE COMMANDS
# =====================================================

db.students.deleteOne({ name: "Ali" })
# â†’ Delete one matching document

db.students.deleteMany({ age: { $lt: 21 } })
# â†’ Delete all documents where age < 21

# =====================================================
# ðŸ”¹ 7. SORTING, LIMITING, COUNTING
# =====================================================

db.students.find().sort({ age: 1 })
# â†’ Sort by age ascending (1 = ascending, -1 = descending)

db.students.find().sort({ age: -1 })
# â†’ Sort by age descending

db.students.find().limit(2)
# â†’ Show only 2 documents

db.students.countDocuments()
# â†’ Count total number of documents

# =====================================================
# ðŸ”¹ 8. OPERATORS (COMMON)
# =====================================================

# Comparison:
# $eq  = equal
# $ne  = not equal
# $gt  = greater than
# $lt  = less than
# $gte = greater than or equal
# $lte = less than or equal
# $in  = matches any value in array
# $nin = not in array

db.students.find({ age: { $gte: 21, $lte: 25 } })
db.students.find({ course: { $in: ["SE", "AI Engineering"] } })

# Logical:
# $and, $or, $not, $nor

db.students.find({
  $or: [{ age: 21 }, { course: "SE" }]
})

db.students.find({
  $and: [{ age: { $gte: 20 } }, { course: "IT" }]
})

# =====================================================
# ðŸ”¹ 9. INDEXES (for fast searching)
# =====================================================

db.students.createIndex({ name: 1 })
# â†’ Create ascending index on name

db.students.getIndexes()
# â†’ View all indexes

db.students.dropIndex("name_1")
# â†’ Drop index

# =====================================================
# ðŸ”¹ 10. TEXT SEARCH (Full-text search)
# =====================================================

db.students.createIndex({ name: "text", course: "text" })
# â†’ Create text index

db.students.find({ $text: { $search: "Engineering" } })
# â†’ Search documents containing the word "Engineering"

# =====================================================
# ðŸ”¹ 11. AGGREGATION (Advanced)
# =====================================================

db.students.aggregate([
  { $match: { age: { $gte: 21 } } },      # Filter
  { $group: { _id: "$course", total: { $sum: 1 } } },  # Group and count
  { $sort: { total: -1 } }                # Sort by total descending
])

# =====================================================
# ðŸ”¹ 12. EXPORT / IMPORT DATA
# =====================================================

# Export collection to JSON file:
# (Run in terminal, not inside mongosh)
mongoexport --db myDatabase --collection students --out students.json

# Import JSON file into MongoDB:
mongoimport --db myDatabase --collection students --file students.json

# =====================================================
# ðŸ”¹ 13. DROP (DELETE) EVERYTHING
# =====================================================

db.dropDatabase()
# â†’ Deletes the current database

# =====================================================
# ðŸ”¹ 14. EXTRA TIPS
# =====================================================

# 1. Collections are automatically created when you insert your first document.
# 2. MongoDB is case-sensitive for field names.
# 3. "_id" is automatically added as a unique identifier for each document.
# 4. Use "pretty()" for clean JSON output.
# 5. In MongoDB Compass, you can insert, edit, and query visually.
# 6. Common local URL for Compass: mongodb://localhost:27017

# =====================================================
# âœ… END OF NOTES
# =====================================================
